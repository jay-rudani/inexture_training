$(document).ready(function () {
  // this is used to counting active items in carousel
  // so atleast one item at-a-time/should be active
  // and used by addCarouselItem() function
  var tempCount = 0;

  // this is self-invoking function
  // and used to add carousel item from localStorage after refresh
  (function () {
    // fetching items from localStorage
    // JSON.parse() is used to convert item into an array from localStorage
    let carouselItems = JSON.parse(localStorage.getItem("carouselItems"));
    // if carouselItems that are fetched from localStorage is empty
    // then if() will not be executed otherwise will start
    // adding items to document one by one
    if (!$.isEmptyObject(carouselItems)) {
      for (let i = 0; i < carouselItems.length; i++) {
        addCarouselItem(carouselItems[i]);
      }
    }
  })();

  // this is another self-invoking used to add text from localStorage that
  // belongs to some image
  (function () {
    // fetching a Map from localStorage because Map is used to
    // store text(captions) on image
    // so image src is the key and value is title + description
    let captions = new Map(JSON.parse(localStorage.getItem("captions")));
    // if map is not empty then if() will be executed
    if (captions.size !== 0) {
      for (const [key, value] of captions) {
        // adding captions that belongs to particular image
        addTextOnSlideFromLocalStorage(key, value);
      }
    }
  })();

  // this is used to hide/show indicators <>
  $("#hideShowBtn").click(function () {
    // getting indicators and toggling between hide and show
    $(".carousel-control-prev, .carousel-control-next").toggle();
    if ($(".carousel-control-prev, .carousel-control-next").is(":hidden")) {
      // here indicators are hidden so carousel will start sliding automatically
      $("#sliderIndicators").attr("data-ride", "carousel");
      $(".carousel").carousel({
        interval: 3000,
      });
    }
    if ($(".carousel-control-prev, .carousel-control-next").is(":visible")) {
      // here indicators are hidden so carousel will start sliding automatically
      $("#sliderIndicators").removeAttr("data-ride");
      $(".carousel").carousel({
        interval: false,
      });
    }
  });

  // add slide function
  $("#chosenFile").change(function (e) {
    // selects file from the event that happend on <input type="file">
    let file = e.target.files[0];

    // this condition states that file should an image or video
    // for image, allowed formats are : .png, .jpg, .jpeg
    // for video, right now only allowed format is .mp4
    if (
      file.name.endsWith(".png") ||
      file.name.endsWith(".jpg") ||
      file.name.endsWith(".jpeg") ||
      file.name.endsWith(".mp4")
    ) {
      // FileReader() object is used to read content from the selected file
      let reader = new FileReader();

      // first fetching items from the localStorage
      let carouselItems = JSON.parse(localStorage.getItem("carouselItems"));

      // if there not item like "carouselItems" in localStorage(empty)
      // then it will use array
      if ($.isEmptyObject(carouselItems)) {
        carouselItems = [];
      }

      // this will use result that is generated by
      // readAsDataURL()
      reader.onload = function (e) {
        // adding result(src) to the array
        carouselItems.push(e.target.result);

        // adding items to localStorage in the form of
        // array so need to use JSON.stringify() to store
        // array in localStorage
        localStorage.setItem("carouselItems", JSON.stringify(carouselItems));

        // adding item to the page
        addCarouselItem(e.target.result);

        // clearing input
        $("#chosenFile").val("");

        // used to close modal after selecting file
        setTimeout(function () {
          $("#closeBtn").trigger("click");
        }, 0);
      };

      // readAsDataURL() returns a result property that contains
      // data as URL that is base64 encoded string
      reader.readAsDataURL(file);
    }
    // this is executed when format is invalid
    // that displays an alert
    else {
      alert("Only images and videos are allowed!");
    }
  });

  // remove slide function
  $("#removeBtn").click(function () {
    // first, finding sibling of the active slide then
    // if there is not a single sibling then slide will not be removed
    // means that is the only slide in the carousel
    let siblings = $(".carousel-inner").children("div.active").siblings();

    // so siblings must be > 0
    if (siblings.length > 0) {
      // taking src for video/image
      let src;

      // if current active item's src is for video/iframe then
      // take that src of video
      if (
        $(".carousel-inner")
          .children("div.active")
          .children(".embed-responsive")
          .children(".embed-responsive-item")
          .children("iframe")
          .attr("src") != undefined
      ) {
        src = $(".carousel-inner")
          .children("div.active")
          .children(".embed-responsive")
          .children(".embed-responsive-item")
          .children("iframe")
          .attr("src");
      }
      // else take the src of active img slide
      else {
        src = $(".carousel-inner")
          .children("div.active")
          .children("img")
          .attr("src");
      }

      // fetching carouselItems from localStorage
      let carouselItems = JSON.parse(localStorage.getItem("carouselItems"));

      // getting the index of an array element from the carouselItems
      // that holds that above selected src
      let index = carouselItems.indexOf(src);

      // then removing that item from the array at index using splice
      // second arg is how many items should be removed from that index
      carouselItems.splice(index, 1);

      // updating array of carouselItems present in localStorge
      localStorage.setItem("carouselItems", JSON.stringify(carouselItems));

      // now finding prev, next sibling of an active item
      let prevSilbling = $(".carousel-inner").children("div.active").prev();
      let nextSilbling = $(".carousel-inner").children("div.active").next();

      // if there is no previous sibling then make next sibling
      // active and remove current one
      if (prevSilbling.length == 0) {
        $(".carousel-inner").children("div.active").next().addClass("active");
        $(".carousel-inner").children("div.active").prev().remove();
      }
      // if there is no next sibling then make prev sibling
      // active and remove current one
      else if (nextSilbling.length == 0) {
        $(".carousel-inner").children("div.active").prev().addClass("active");
        $(".carousel-inner").children("div.active").next().remove();
      }
      // if the item to be removed has both next, prev sibling
      // then making next one active and removing current one
      else if (prevSilbling.length == 1 && nextSilbling.length == 1) {
        let next = $(".carousel-inner").children("div.active").next();
        $(".carousel-inner").children("div.active").remove();
        next.addClass("active");
      }

      // fetching caption for removing it
      let captions = new Map(JSON.parse(localStorage.getItem("captions")));

      // deleting captions that belongs to removed slide
      captions.delete(src);

      // updating localStorage
      localStorage.setItem(
        "captions",
        JSON.stringify(Array.from(captions.entries()))
      );
    }
  });

  // add text/caption function
  $("#addTextSubmit").click(function () {
    // fetching captions map from localStorage if there exist
    let captions = new Map(JSON.parse(localStorage.getItem("captions")));

    // if there is no map in localStorage then create new Map
    if (captions.size === 0) {
      captions = new Map();
    }

    // getting the src value of the active item from carousel
    let activeItemSrc = $(".carousel-inner")
      .children("div.active")
      .children("img")
      .attr("src");

    // taking value of the input that holds the caption title
    let title = $("#captionTitle").val();
    // taking value of the input that holds the caption description
    let desc = $("#captionDesc").val();

    // then adding key, value in map
    // key = src of active item
    // value = title + desc separated by :;
    captions.set(String(activeItemSrc), title + ":;" + desc);

    // setting/updating map of localStorage
    // Array.from(map.entries()) returns an array
    localStorage.setItem(
      "captions",
      JSON.stringify(Array.from(captions.entries()))
    );

    // adding text on slide page
    // this will use addTextOnSlide()
    addTextOnSlide(title, desc);

    // clearing inputs
    $("#captionTitle").val("");
    $("#captionDesc").val("");

    // after clicking on addTextSubmit, closing its modal
    $("#closeBtnText").trigger("click");
  });

  // function for dynamicallay adding html to the document
  // this is for adding slide
  function addCarouselItem(path) {
    // fetch div that has class .carousel-inner
    let carouselInner = $(".carousel-inner");

    // creating carousel item
    let carouselItem = $('<div class="carousel-item"></div>');

    // if path/src that is created by FileReader()
    // is image => data:image/ then
    if (path.startsWith("data:image/")) {
      // creating img element
      let img = $('<img class="d-block w-100" />');

      // setting src for the above img
      img.attr("src", path);

      // adding that img to carousel item
      carouselItem.html(img);

      // then appending that item to the carousel
      carouselInner.append(carouselItem);

      // carousel only works if there is atleast one item active
      // if there is no item, then adding class=active to first slide
      if (tempCount == 0) {
        carouselItem.addClass("active");
        tempCount++;
      }
    }
    // if path/src that is created by FileReader()
    // is image => data:video/ then
    else if (path.startsWith("data:video/")) {
      // creating responsive embed div for its items and iframe
      let embed = $(
        '<div class="embed-responsive embed-responsive-16by9"></div>'
      );

      // creating item for embed/parent div
      let embedItem = $('<div class="embed-responsive-item"></div>');

      // creating iframe that holds src of video
      let iframe = $('<iframe class="d-block w-100"></iframe>');

      // setting src of video
      iframe.attr("src", path);

      // adding iframe to embed item
      embedItem.append(iframe);

      // adding above embed item to embed main div
      embed.append(embedItem);

      // adding that embed final div as a carousel item
      carouselItem.html(embed);

      // then appending that carousel item to carousel
      carouselInner.append(carouselItem);

      // carousel only works if there is atleast one item active
      // if there is no item, then adding class=active to first slide
      if (tempCount == 0) {
        carouselItem.addClass("active");
        tempCount++;
      }
    }
  }

  // function for dynamicallay adding html to the document
  // this is for adding text on image
  function addTextOnSlide(title, description) {
    // fetching active item
    let activeItem = $(".carousel-inner").children("div.active");

    // creating carousel caption that is used to add text on slide
    let caption = $('<div class="carousel-caption"></div>');

    // caption title element
    let captionTitle = $("<h5></h5>");

    // caption description element
    let captionDesc = $("<p></p>");

    // setting title & description
    captionTitle.text(title);
    captionDesc.text(description);

    // appending title and desc to caption div
    caption.append(captionTitle);
    caption.append(captionDesc);

    // then adding to the current slide
    activeItem.append(caption);
  }

  // function for dynamicallay adding html to the document
  // this is for adding text on image from the localStorage
  // which holds a map of key = src and value = title + desc
  function addTextOnSlideFromLocalStorage(key, value) {
    // fetching all imgs element from div
    let images = $(".carousel-inner").children("div").children("img");

    // iterating through it
    for (let img of images) {
      // taking src of each img
      let src = $(img).attr("src");

      // if src mathes with key then add text on that slide/image
      if (src === key) {
        // taking parent of that img
        let item = $(img).parent();

        // taking value as temp string
        let temp = String(value);

        // spliting value by :;
        // because content before ':;' is title
        // and after is desc
        let titleDesc = temp.split(":;");

        // creating caption div, title, desc
        let caption = $('<div class="carousel-caption"></div>');
        let captionTitle = $("<h5></h5>");
        let captionDesc = $("<p></p>");

        // setting title
        captionTitle.text(titleDesc[0]);
        // setting desc
        captionDesc.text(titleDesc[1]);

        // appending both to caption div
        caption.append(captionTitle);
        caption.append(captionDesc);

        // adding it to slide
        item.append(caption);
      }
    }
  }

  // when you click on image it will be opened in new window
  $(".carousel-inner").click(function () {
    let src = $(".carousel-inner")
      .children("div.active")
      .children("img")
      .attr("src");
    let newWindow = window.open();
    newWindow.document.write(
      "<body style='text-align:center;'><img height='500' width='800' src='" +
        src +
        "' /></body>"
    );
  });
});
